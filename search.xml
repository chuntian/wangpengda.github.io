<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[趣学算法(1)--从Fibonacci说起]]></title>
    <url>%2F2018%2F12%2F20%2F%E8%B6%A3%E5%AD%A6%E7%AE%97%E6%B3%95-1-%E4%BB%8EFibonacci%E8%AF%B4%E8%B5%B7%2F</url>
    <content type="text"><![CDATA[&#8195;&#8195;由于最近工作中，也可以说是个人爱好吧，涉及到一些算法的问题，个人归结起来觉得应该是NP-Hard问题，一时找不到好的解决方案。于是网上各种搜索，偶然翻到一本《趣学算法》的书，大致看了两眼，发现曾经学过的一些算法 像回溯、贪心等算法，由于长时间不用，也都忘记了。于是决定在工作之余，同时借助这本书的机会，再系统学习下算法，争取在学习过程中，能找到我那NP-Hard问题的解决方案。 &#8195;&#8195;抛砖引玉，先从一个程序员都非常熟悉的斐波那契数列算法说起，感受一下算法的趣味。说起斐波那契，程序员们应该都非常熟悉了，估计是曾经我们学习递归时候的重点案例吧，但是除了递归还有没有别的方法呢？或者说我们有没有考虑过，结果是算对了，但是背后的效率怎么样呢？ 方法一&#8195;&#8195;先从熟悉的递归方法说起： &#8195;&#8195;斐波那契数列应该都知道，据说大自然很多现象也都是斐波那契数，有兴趣的可以去查查，这里就不多介绍了，概念说一下，用函数公式的方式表示，大概是这个意思： F_n=\begin{cases} 1, & n = 1\ or\ n = 2\\ F_{n-1}+F_{n-2}, & n>2 \end{cases}递归算法代码最容易理解，就是反复迭代调用自己往下计算，代码基本和上述表达式一样，如下（本文章代码均用java编写，样例代码地址https://github.com/wangpengda/algorithm): 12345678910111213141516171819import java.text.SimpleDateFormat;import java.util.Date;public class Fib &#123; public static void main(String[] args) throws InterruptedException &#123; SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/dd HH:mm:ss.SSS"); System.out.println(sdf.format(new Date())); System.out.println(Fib1(40)); System.out.println(sdf.format(new Date())); &#125; public static int Fib1(int n) &#123; if (n == 1 || n == 2) return 1; else return Fib1(n - 1) + Fib1(n - 2); &#125;&#125; &#8195;&#8195;这个很容易理解，但是不知道有没有人用这个算过F(50),我这8G内存，4核电脑是算了半天没算出来。再专业一点就是看一下它的时间复杂度，仔细分析会发现是指数增长的，往后算，每多算一个数，时间是翻倍的，它的时间复杂度是O(2^n); 方法二&#8195;&#8195;其实斐波那契归根结底还是个数列问题，就和我们高中学的等差数列、等比数列差不多，只是它是和用当前项的前两项表示的，我们只需要记录下前两项就可以了，而不用像递归算法那样，每次都去计算前两项，具体代码如下 123456789101112131415161718192021222324252627282930import java.text.SimpleDateFormat;import java.util.Date;public class Fib &#123; public static void main(String[] args) throws InterruptedException &#123; SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/dd HH:mm:ss.SSS"); System.out.println(sdf.format(new Date())); System.out.println(Fib2(48)); System.out.println(sdf.format(new Date())); &#125; public static int Fib2(int n) &#123; if (n == 1 || n == 2) return 1; else &#123; int numsecond = 1; int numfirst = 1; int temp = 1; for (int i = 3; i &lt;= n; i++) &#123; temp = numsecond + numfirst; numfirst = numsecond; numsecond = temp; &#125; return numsecond; &#125; &#125;&#125; &#8195;&#8195;这个算法的时间复杂度是O(n),用这个算F(10000)基本也在1秒之内，就是这么神奇啊。按理说这个写法速度上已经是质的飞跃了，但是… 方法三&#8195;&#8195;书上简单提了一句，还可以把时间复杂度降到O(logn),不过没有详细赘述。好事者如我，本着不打破砂锅的程序员不是好厨师的原则，继续搜索。不得不说，确实有大师，用矩阵的方法，也是让我开了眼界啊，具体看下列表达式： \left(\begin{array}{c} F_n \\ F_{n-1} \end{array}\right)=\left(\begin{array}{c} F_{n-1}+F_{n-2} \\ F_{n-1} \end{array}\right)=\left(\begin{array}{c} 1*F_{n-1}+1*F_{n-2} \\ 1*F_{n-1}+0*F_{n-2} \end{array}\right)=\left(\begin{array}{cc} 1 & 1 \\ 1 & 0 \end{array}\right)*\left(\begin{array}{c} F_{n-1} \\ F_{n-2} \end{array}\right)\\ =\left(\begin{array}{cc} 1 & 1 \\ 1 & 0 \end{array}\right)^2*\left(\begin{array}{c} F_{n-2} \\ F_{n-3} \end{array}\right)......=\left(\begin{array}{cc} 1 & 1 \\ 1 & 0 \end{array}\right)^{n-2}*\left(\begin{array}{c} F_2 \\ F_1 \end{array}\right)&#8195;&#8195;看着上述表达式，有什么感想？耳边曾经经常响起的大学课程无用论是否还在回荡？事实证明，学校的课程还是相当有用的啊，不懂矩阵的回去查查大学线性代数，😄 。回过头来再说斐波那契问题，上述表达式把数列问题就转换成了，计算一个2*2矩阵的n-2次幂的问题,幂运算就可以用二分法运算降低时间复杂度了，简单说一下大概思路，就比如算2的32次幂，最简单办法肯定是循环31次，用2挨个乘；二分法的意思就是2的32次幂 可以转换为 2的16次幂乘以2的16次幂，2的16次幂 还可以转换为 2的8次幂乘以2的8次幂，……，以此类推，大概循环5次即可算出最后结果。思路大概就是这么个思路，网上代码是用python实现的，python里有成熟的计算矩阵的函数，我自己用java实现了一下，具体代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import java.text.SimpleDateFormat;import java.util.Date;public class Fib &#123; public static void main(String[] args) throws InterruptedException &#123; SimpleDateFormat sdf = new SimpleDateFormat("YYYY/MM/dd HH:mm:ss.SSS"); System.out.println(sdf.format(new Date())); System.out.println(Fib3(48)); System.out.println(sdf.format(new Date())); &#125; public static int Fib3(int n) &#123; if (n == 1 || n == 2) return 1; else &#123; int[][] a = new int[2][2];//用二维数组模拟2*2矩阵 a[0][0] = 1; a[0][1] = 1; a[1][0] = 1; a[1][1] = 0; int[][] temp = matricPow(a, n - 2); return temp[0][0] + temp[0][1]; &#125; &#125; //矩阵相乘计算 目前只支持2*2矩阵相乘 public static int[][] matricMulity(int[][] a, int[][] b) &#123; int[][] result = new int[2][2]; result[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0]; result[0][1] = a[0][0] * b[0][1] + a[0][1] * b[1][1]; result[1][0] = a[1][0] * b[0][0] + a[1][1] * b[1][0]; result[1][1] = a[1][0] * b[0][1] + a[1][1] * b[1][1]; return result; &#125; //2*2矩阵幂运算 public static int[][] matricPow(int[][] a, int n) &#123; if (n == 0) return new int[][] &#123; &#123; 1, 1 &#125;, &#123; 1, 0 &#125; &#125;; if (n == 1) &#123; return a; &#125; if (n % 2 == 0) return matricPow(matricMulity(a, a), n / 2); else &#123; return matricMulity(matricPow(matricMulity(a, a), (n - 1) / 2), a); &#125; &#125;&#125; &#8195;&#8195;n比较小的时候，方法二和方法三计算时间差不多，n特别大才能看出些效果，当n=1,000,000时，方法一就不考虑了，今年应该算不出来。方法二和方法三，计算时间如下： 12345672018/12/20 22:38:11.81118847551312018/12/20 22:38:11.8212018/12/20 22:38:13.82218847551312018/12/20 22:38:13.823 &#8195;&#8195;两种方法计算第100万位基本还在毫秒级别，一般情况可能第二种方法就够用了，但是你不研究第三种方法，是体会不到第三种方法的乐趣的，呵呵~~~ 备注：本文章中所有公式都是用markdown代码编写，不是图片，不是word。第一次用markdown，基本也是第一次用java写程序，生命在于折腾嘛。后续我再研究研究将github的博客打开评论，希望各位来拍砖。]]></content>
      <categories>
        <category>自我升华</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新的起点]]></title>
    <url>%2F2018%2F12%2F19%2F%E6%96%B0%E7%9A%84%E8%B5%B7%E7%82%B9%2F</url>
    <content type="text"><![CDATA[&#8195;&#8195;新公司入职正好一个月，记录一下。 &#8195;&#8195;从今天开始定期写博客，方方面面的，刚开始用markdown和github写博客，不太习惯，慢慢习惯。]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
